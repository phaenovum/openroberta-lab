General Remarks For Using OpenRoberta From The Command Line.

The OpenRoberta sources are contained in a git repository. First generate the software artifacts by calling.
Top level in the git repository is a script 'ora.sh' to be used from the command line to configure the OpenRoberta application.
Remarks about the database:
The database may be run in 'embedded' mode. This is for local test/debug and small servers as the RaspBerryPI:
- the DATABASEURL is "jdbc:hsqldb:file:<some-basedir>/db-<serverversion>/openroberta-db;ifexists=true"
- the database is locked by the process accessing the database. Thus no concurrent access (with a sql client) is possible.
The database may be run in 'server' mode. This is for the test and prod server
- the DATABASEURL is "jdbc:hsqldb:hsql://localhost/openroberta-db" or "jdbc:hsqldb:hsql://localhost/openroberta-db-<DB-RESPECTIVE-SERVER-NAME>"
  on a test server the suffix <DB-RESPECTIVE-SERVER-NAME> is a test instance name as test, develop, dev1,...,dev9
- you can get access to the database used by the server concurrently with a sql client. Be careful NOT to block the server

Commands of the ora.sh script:
  help      get help (this text)
  
  export INSTALLATION-DIR [gzip]  create a self-contained installation. The INSTALLATION-DIR must NOT exist.
              Parameter 'gzip' compresses in directory staticResources suitable files (as *.js, *.css, etc.) to save bandwith when staticResources are loaded.
              You are responsible to copy a usable database into directory 'db-<serverVersion>'.
              In the INSTALLATION-DIR is the admin script './admin.sh'. Use './admin.sh start-embedded-server' to start (on small systems as RaspberryPI)
              a server with embedded database. The script detects a database from an earlier versions and upgrades them to the actual version. If NO database
              at all is found, a  empty database is created. Run './admin.sh help' for more administration commands.
							Further scripts in the INSTALLATION-DIR (ONLY USABLE IN SERVER MODE!):

  create-empty-db [{VERSION}] create an empty database at path "OpenRobertaServer/db-VERSION". If the parameter VERSION is missing, the VERSION is got from
              the installation. In this case, "mvn install" must have run. An existing datatbase is NOT overwritten.
  start-from-git [-rdbg] [{path-to-crosscompiler-resources}]
              if a developer wants to start the server from a Git working tree in embedded mode (that is fine for tests), use this command.
              Note, that running the server from an IDE as eclipse is EASIER. You need a valid database. Command 'createEmptydb' creates it.
							if '-rdbg' is used, a remote debug session (e.g. from an IDE as Eclipse) can be attached to the server (on port 8000).
							Only if you want to test crosscompiler calls, you need the path to the crosscompiler resources directory.

The following commands are used rarely:
  
  test-setup-update [{base-dir}]
             expects the test server setup in {base-dir} (defaults to /data/openroberta) and copies all resources from the git-dir 'Docker/openroberta/conf'
             into {base-dir}/conf. Needs root privileges. Must be executed on a test machine from an up-to-date git repository. 

  java       check whether java and javac are on the path and the JDK version is ok (used internally)

The following command is deprecated:

  alive {SERVERURL} {-q} {EVERY} {TIMEOUT} check after EVERY sec (default: 60) if the server is alive.
                           The server is assumed to have crashed, if it does not answer within TIMEOUT sec (default: 10).
                           -q is the quiet mode: report crashes only. Example: ./ora.sh alive localhost:1999 120 5

